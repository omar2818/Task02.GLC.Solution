@page "/employees"
@using Microsoft.AspNetCore.Authorization
@using ServiceAbstraction
@using Shared.DataTransferObjects
@inject IEmployeeService EmployeeService
@inject IDepartmentService DepartmentService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="employees-container">
    <div class="header">
        <h2>Employee Management</h2>
        <div class="header-actions">
            <button class="btn btn-primary" @onclick="ShowAddModal">
                <span class="icon">➕</span> Add Employee
            </button>
            <button class="btn btn-secondary" @onclick="Logout">
                <span class="icon">🚪</span> Logout
            </button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">
            @successMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-error">
            @errorMessage
        </div>
    }

    @if (isLoading)
    {
        <div class="loading">
            <div class="spinner"></div>
            <p>Loading employees...</p>
        </div>
    }
    else
    {
        <div class="table-container">
            <table class="employees-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Department</th>
                        <th>Manager</th>
                        <th>Salary</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (employees.Any())
                    {
                        @foreach (var employee in employees)
                        {
                            <tr>
                                <td>@employee.EmpId</td>
                                <td>@employee.Name</td>
                                <td>@employee.Department</td>
                                <td>@(employee.Manager ?? "N/A")</td>
                                <td>$@employee.Salary.ToString("N2")</td>
                                <td class="actions">
                                    <button class="btn btn-sm btn-edit" @onclick="() => ShowEditModal(employee)">
                                        Edit
                                    </button>
                                    <button class="btn btn-sm btn-delete" @onclick="() => ShowDeleteConfirmation(employee)">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="no-data">No employees found</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@if (showModal)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>@(isEditMode ? "Edit Employee" : "Add New Employee")</h3>
                <button class="close-btn" @onclick="CloseModal">✕</button>
            </div>

            <div class="modal-body">
                <EditForm Model="@employeeForm" OnValidSubmit="SaveEmployee">
                    <div class="form-group">
                        <label>Name</label>
                        <InputText class="form-control" @bind-Value="employeeForm.Name" />
                    </div>

                    <div class="form-group">
                        <label>Department</label>
                        <InputSelect class="form-control" @bind-Value="employeeForm.DepartmentId">
                            <option value="0">Select Department</option>
                            @foreach (var dept in departments)
                            {
                                <option value="@dept.Id">@dept.Name</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <label>Manager (Optional)</label>
                        <InputSelect class="form-control" @bind-Value="employeeForm.ManagerId">
                            <option value="">No Manager</option>
                            @foreach (var emp in employees.Where(e => !isEditMode || e.Id != selectedEmployee?.Id))
                            {
                                <option value="@emp.Id">@emp.Name</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <label>Salary</label>
                        <InputNumber class="form-control" @bind-Value="employeeForm.Salary" />
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                            @(isProcessing ? "Saving..." : "Save")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (showDeleteModal)
{
    <div class="modal-overlay" @onclick="CloseDeleteModal">
        <div class="modal modal-sm" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Confirm Delete</h3>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <strong>@selectedEmployee?.Name</strong>?</p>
                <p class="warning-text">This action cannot be undone.</p>
                <div class="modal-actions">
                    <button class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button class="btn btn-delete" @onclick="DeleteEmployee" disabled="@isProcessing">
                        @(isProcessing ? "Deleting..." : "Delete")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .employees-container {
        padding: 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .header h2 {
        color: #333;
        margin: 0;
    }

    .header-actions {
        display: flex;
        gap: 1rem;
    }

    .btn {
        padding: 0.6rem 1.2rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.95rem;
        transition: all 0.3s;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background: #667eea;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background: #5568d3;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-secondary:hover:not(:disabled) {
        background: #5a6268;
    }

    .btn-edit {
        background: #ffc107;
        color: #333;
    }

    .btn-edit:hover:not(:disabled) {
        background: #e0a800;
    }

    .btn-delete {
        background: #dc3545;
        color: white;
    }

    .btn-delete:hover:not(:disabled) {
        background: #c82333;
    }

    .btn-sm {
        padding: 0.4rem 0.8rem;
        font-size: 0.875rem;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .alert {
        padding: 1rem;
        border-radius: 5px;
        margin-bottom: 1rem;
    }

    .alert-success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .loading {
        text-align: center;
        padding: 3rem;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
    }

    .table-container {
        background: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .employees-table {
        width: 100%;
        border-collapse: collapse;
    }

    .employees-table thead {
        background: #f8f9fa;
    }

    .employees-table th {
        padding: 1rem;
        text-align: left;
        font-weight: 600;
        color: #495057;
        border-bottom: 2px solid #dee2e6;
    }

    .employees-table td {
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
    }

    .employees-table tbody tr:hover {
        background: #f8f9fa;
    }

    .actions {
        display: flex;
        gap: 0.5rem;
    }

    .no-data {
        text-align: center;
        color: #6c757d;
        padding: 2rem !important;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal {
        background: white;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-sm {
        max-width: 400px;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem;
        border-bottom: 1px solid #dee2e6;
    }

    .modal-header h3 {
        margin: 0;
        color: #333;
    }

    .close-btn {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #6c757d;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .close-btn:hover {
        color: #333;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #333;
        font-weight: 500;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 5px;
        font-size: 1rem;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .warning-text {
        color: #dc3545;
        font-size: 0.9rem;
    }

    .icon {
        font-size: 1rem;
    }
</style>

@code {
    private List<EmployeeDTO> employees = new();
    private List<DepartmentDto> departments = new();
    private EmployeeDTO? selectedEmployee;
    private EmployeeFormModel employeeForm = new();

    private bool isLoading = true;
    private bool isProcessing = false;
    private bool showModal = false;
    private bool showDeleteModal = false;
    private bool isEditMode = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            employees = (await EmployeeService.GetAllEmployeesAsync()).ToList();
            departments = (await DepartmentService.GetAllDepartmentsAsync()).ToList();
        }
        catch (Exception)
        {
            errorMessage = "Failed to load data. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowAddModal()
    {
        isEditMode = false;
        selectedEmployee = null;
        employeeForm = new EmployeeFormModel();
        showModal = true;
        ClearMessages();
    }

    private void ShowEditModal(EmployeeDto employee)
    {
        isEditMode = true;
        selectedEmployee = employee;
        employeeForm = new EmployeeFormModel
        {
            Name = employee.Name,
            DepartmentId = employee.DepartmentId,
            ManagerId = employee.ManagerId,
            Salary = employee.Salary
        };
        showModal = true;
        ClearMessages();
    }

    private void ShowDeleteConfirmation(EmployeeDto employee)
    {
        selectedEmployee = employee;
        showDeleteModal = true;
        ClearMessages();
    }

    private void CloseModal()
    {
        showModal = false;
        employeeForm = new EmployeeFormModel();
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        selectedEmployee = null;
    }

    private async Task SaveEmployee()
    {
        isProcessing = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            bool success;

            if (isEditMode && selectedEmployee != null)
            {
                var updateDto = new UpdateEmployeeDto
                {
                    Id = selectedEmployee.Id,
                    Name = employeeForm.Name,
                    DepartmentId = employeeForm.DepartmentId,
                    ManagerId = employeeForm.ManagerId,
                    Salary = employeeForm.Salary
                };
                success = await EmployeeService.UpdateEmployeeAsync(updateDto);
            }
            else
            {
                var createDto = new CreateEmployeeDto
                {
                    Name = employeeForm.Name,
                    DepartmentId = employeeForm.DepartmentId,
                    ManagerId = employeeForm.ManagerId,
                    Salary = employeeForm.Salary
                };
                success = await EmployeeService.CreateEmployeeAsync(createDto);
            }

            if (success)
            {
                successMessage = isEditMode ? "Employee updated successfully!" : "Employee added successfully!";
                CloseModal();
                await LoadData();
            }
            else
            {
                errorMessage = "Failed to save employee. Please try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while saving. Please try again.";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeleteEmployee()
    {
        if (selectedEmployee == null) return;

        isProcessing = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var success = await EmployeeService.DeleteEmployeeAsync(selectedEmployee.Id);

            if (success)
            {
                successMessage = "Employee deleted successfully!";
                CloseDeleteModal();
                await LoadData();
            }
            else
            {
                errorMessage = "Failed to delete employee. Please try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while deleting. Please try again.";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/login");
    }

    private void ClearMessages()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private class EmployeeFormModel
    {
        public string Name { get; set; } = string.Empty;
        public int DepartmentId { get; set; }
        public int? ManagerId { get; set; }
        public decimal Salary { get; set; }
    }
}